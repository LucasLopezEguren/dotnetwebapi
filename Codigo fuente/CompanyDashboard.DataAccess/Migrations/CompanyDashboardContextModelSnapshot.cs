// <auto-generated />
using System;
using CompanyDashboard.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyDashboard.DataAccess.Migrations
{
    [DbContext(typeof(CompanyDashboardContext))]
    partial class CompanyDashboardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CompanyDashboard.Domain.Area", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DataSource");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.AreaUser", b =>
                {
                    b.Property<int>("AreaID");

                    b.Property<int>("UserID");

                    b.HasKey("AreaID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("AreaUser");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.Indicator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Area");

                    b.Property<int?>("GreenID");

                    b.Property<string>("Name");

                    b.Property<int?>("RedID");

                    b.Property<int?>("YellowID");

                    b.HasKey("ID");

                    b.HasIndex("GreenID");

                    b.HasIndex("RedID");

                    b.HasIndex("YellowID");

                    b.ToTable("Indicators");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Accion");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.Node", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Area");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("LeftID");

                    b.Property<int?>("RightID");

                    b.Property<string>("Sign");

                    b.Property<string>("Text");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("LeftID");

                    b.HasIndex("RightID")
                        .IsUnique()
                        .HasFilter("[RightID] IS NOT NULL");

                    b.ToTable("Node");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Node");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.Session", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("Token");

                    b.Property<string>("username");

                    b.HasKey("ID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Admin");

                    b.Property<string>("Lastname");

                    b.Property<string>("Mail");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.UserIndicator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("indicator");

                    b.Property<string>("name");

                    b.Property<int>("order");

                    b.Property<int>("user");

                    b.Property<bool>("visible");

                    b.HasKey("ID");

                    b.ToTable("UsersIndicators");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.BinaryOperator", b =>
                {
                    b.HasBaseType("CompanyDashboard.Domain.Node");

                    b.HasDiscriminator().HasValue("BinaryOperator");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.AreaUser", b =>
                {
                    b.HasOne("CompanyDashboard.Domain.Area", "area")
                        .WithMany("AreaUsers")
                        .HasForeignKey("AreaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CompanyDashboard.Domain.User", "user")
                        .WithMany("AreaUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CompanyDashboard.Domain.Indicator", b =>
                {
                    b.HasOne("CompanyDashboard.Domain.BinaryOperator", "Green")
                        .WithMany()
                        .HasForeignKey("GreenID");

                    b.HasOne("CompanyDashboard.Domain.BinaryOperator", "Red")
                        .WithMany()
                        .HasForeignKey("RedID");

                    b.HasOne("CompanyDashboard.Domain.BinaryOperator", "Yellow")
                        .WithMany()
                        .HasForeignKey("YellowID");
                });

            modelBuilder.Entity("CompanyDashboard.Domain.Node", b =>
                {
                    b.HasOne("CompanyDashboard.Domain.Node", "Left")
                        .WithMany()
                        .HasForeignKey("LeftID");

                    b.HasOne("CompanyDashboard.Domain.Node", "Right")
                        .WithOne()
                        .HasForeignKey("CompanyDashboard.Domain.Node", "RightID");
                });
#pragma warning restore 612, 618
        }
    }
}
